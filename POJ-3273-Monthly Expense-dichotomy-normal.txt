/**
 *POJ-3273-Monthly Expense
 *xuchen
 *2015-11-14 21:20:54
**/
/**
 * DP, but TLE, O(n^3*m)
 * We can use simply dichotomy, O(n*logn)
**/
#include "stdio.h"
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

const int N = 100005;
int sum;
int a[N];
int n, m;

bool isOk(int s)
{
	int cnt=1, sum=0;
	for(int i=1; i<=n; i++)
	{
		if(sum+a[i] <= s)
			sum+=a[i];
		else
		{
			cnt++;
			sum = a[i];
		}
	}
	if(cnt>m)
		return false;
	else
		return true;
}

int main()
{
	int low = 0, up, mid;
	int minM;
	scanf("%d%d", &n, &m);
	for(int i=1; i<=n; i++)
	{
		scanf("%d", &a[i]);
		if(low<a[i])
			low = a[i];
		sum+=a[i];
	}
	up = sum;
	minM = up;
	while(low<=up)
	{
		mid = (up+low)/2;
		if(isOk(mid))
		{
			up = mid-1;
			minM = mid;
		}
		else
			low = mid+1;
	}
	printf("%d\n", minM);
	return 0;
}
/**
 * DP code
int f[N][2];
int costs[N];

int a(int s, int e)
{
	int ans = 0;
	for(int i=s; i<=e; i++)
		ans+=costs[i];
	return ans;
}

int main()
{
	int n, m;
	int tmp;
	int k;
	scanf("%d%d", &n, &m);
	for(int i=1; i<=n; i++)
	{
		scanf("%d", &costs[i]);
	}

	for(int i=1; i<=n; i++)
		f[i][1] = a(1, i);
	
	k = 0;
	for(int t=2; t<=m; t++)
	{
		for(int i=t; i<=n; i++)
		{
			f[i][k] = f[i-1][1-k];
			for(int d = t-1; d<i; d++)
			{
				tmp = max(f[d][1-k], a(d+1, i));
				if(tmp < f[i][k])
					f[i][k] = tmp;		
			}
		}
		k = 1-k;
	}
	printf("%d\n", f[n][1-k]);
	return 0;
}
**/
